import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

public class Solution {

	public static void main(String[] args) throws IOException {
		ArrayList<Entry> dataSet = parseDataFile();
		ArrayList<Entry> testData = extractTestDataSet(dataSet);
		id3(testData,)

	}
	
	public static ArrayList<Entry> parseDataFile() throws IOException {
		ArrayList<Entry> result = new ArrayList<Entry>();
		
	    FileReader in = new FileReader("data.txt");
	    BufferedReader br = new BufferedReader(in);
	    
		String line;
		while ((line = br.readLine()) != null) {
		    String[] parsed = line.split(",");
		    boolean nodeCaps = parsed[4].equals("'yes'") ? true:false;
		    boolean irradiate = parsed[8].equals("'yes'") ? true:false;
		    int degMalig;
		    if (parsed[5].equals("'1'")) {
		    	degMalig = 1;
		    }
		    else if (parsed[5].equals("'2'")) {
		    	degMalig = 2;
		    }
		    else {
		    	degMalig = 3;
		    }
		    
		    Entry current = new Entry(parsed[0].replace('\'', Character.MIN_VALUE),
		    		parsed[1].replace('\'', Character.MIN_VALUE), 
		    		parsed[2].replace('\'', Character.MIN_VALUE),  
		    		parsed[3].replace('\'', Character.MIN_VALUE), 
		    		nodeCaps,
		    		degMalig, 
		    		parsed[6].replace('\'', Character.MIN_VALUE),
		    		parsed[7].replace('\'', Character.MIN_VALUE),
		    		irradiate, 
		    		parsed[9].replace('\'', Character.MIN_VALUE));
		    
		    result.add(current);
		    

		}
		
		return result;
	}
	
	public static ArrayList<Entry> extractTestDataSet(ArrayList<Entry> originalSet) {
		ArrayList<Entry> result = new ArrayList<Entry>();
		Random randomGenerator = new Random();
		for (int i = 0; i < 40; i++){
			int index = randomGenerator.nextInt(originalSet.size());
			result.add(originalSet.get(index));
			originalSet.remove(index);
		}
		
		return result;
	}
	
	public static Node ID3(ArrayList<Entry> samples, Feature targetFeature, ArrayList<Feature> features) {
		Node root = new Node();
		if (checkIfAllSamplesHasTargetCategory("recurrence-events", samples)) {
			root.feature = targetFeature;
			root.value = "recurrence-events";
			return root;
		}
		else if (checkIfAllSamplesHasTargetCategory("no-recurrence-events", samples)){
			root.feature = targetFeature;
			root.value = "no-recurrence-events";
			return root;
		}
		else {
			return root;
		}
	}
	
	public static boolean checkIfAllSamplesHasTargetCategory(String category, ArrayList<Entry> samples) {
		int count = 0;
		for (int i = 0; i < samples.size(); i++) {
			if (samples.get(i).category.equals(category)) {
				count++;
			}
		}
		
		if (count == samples.size()) {
			return true;
		}
		
		return false;
	}

}
