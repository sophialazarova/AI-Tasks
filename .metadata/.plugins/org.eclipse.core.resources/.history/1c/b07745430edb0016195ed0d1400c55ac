import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Random;

public class Solution {

    private static class Board {
    	
        Random random = new Random();
        int[] rows;

        Board(int n) {
            rows = new int[n];
            fillBoardInitially();
        }

        void fillBoardInitially() {
            for (int i = 0, n = rows.length; i < n; i++) {
                rows[i] = i;
            }
            for (int i = 0, n = rows.length; i < n; i++) {
                int j = random.nextInt(n);
                int rowToSwap = rows[i];
                rows[i] = rows[j];
                rows[j] = rowToSwap;
            }
        }

        int countConflicts(int row, int col) {
            int count = 0;
            for (int c = 0; c < rows.length; c++) {
                if (c == col){
                	continue;
                }
                int r = rows[c];
                if (r == row || Math.abs(r-row) == Math.abs(c-col)){
                	count++;
                }
            }
            return count;
        }

        void solve() {
            int moves = 0;

            ArrayList<Integer> candidates = new ArrayList<Integer>();

            while (true) {

                int maxConflicts = 0;
                candidates.clear();
                for (int c = 0; c < rows.length; c++) {
                    int conflicts = countConflicts(rows[c], c);
                    if (conflicts == maxConflicts) {
                        candidates.add(c);
                    } else if (conflicts > maxConflicts) {
                        maxConflicts = conflicts;
                        candidates.clear();
                        candidates.add(c);
                    }
                }

                if (maxConflicts == 0) {
                	this.print();
                    return;
                }

                int worstQueenColumn =
                        candidates.get(random.nextInt(candidates.size()));

                int minConflicts = rows.length;
                candidates.clear();
                for (int r = 0; r < rows.length; r++) {
                    int conflicts = countConflicts(r, worstQueenColumn);
                    if (conflicts == minConflicts) {
                        candidates.add(r);
                    } else if (conflicts < minConflicts) {
                        minConflicts = conflicts;
                        candidates.clear();
                        candidates.add(r);
                    }
                }

                if (!candidates.isEmpty()) {
                    rows[worstQueenColumn] =
                        candidates.get(random.nextInt(candidates.size()));
                }

                moves++;
                if (moves == rows.length * 2) {
                	fillBoardInitially();
                    moves = 0;
                }
            }
        }

        void print() {
            for (int r = 0; r < rows.length; r++) {
                for (int c = 0; c < rows.length; c++) {
                    System.out.print(rows[c] == r ? " Q " : " * ");
                }
                System.out.println();
            }
        }
    }

    public static void main(String[] args) {
        Board board = new Board(100);
        board.solve();
       // board.print();
    }
}
